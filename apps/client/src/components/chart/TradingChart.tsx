import React, { useMemo, useState } from 'react'
import {
  ResponsiveContainer,
  ComposedChart,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ReferenceLine,
  Bar,
} from 'recharts'

/**
 * ローソク足チャート用のデータ構造を定義するインターフェースです。
 *
 * 各時点の OHLC（始値・高値・安値・終値）価格データと
 * オプションの出来高情報を含みます。
 *
 * @generated by Claude 🤖
 */
interface CandleData {
  timestamp: number
  open: number
  high: number
  low: number
  close: number
  volume?: number
}

/**
 * TradingChart コンポーネントのプロパティを定義するインターフェースです。
 *
 * チャートの表示設定、データ、サイズ、現在価格などの
 * カスタマイズオプションを指定できます。
 *
 * @generated by Claude 🤖
 */
interface TradingChartProps {
  data: CandleData[]
  width?: number
  height?: number
  showVolume?: boolean
  currentPrice?: number
  className?: string
}

// Custom Candlestick component for Recharts
const Candlestick = (props: any) => {
  const { payload, x, y, width, height } = props
  if (!payload) return null

  const { open, high, low, close } = payload

  // Determine colors
  const isGreen = close >= open
  const bodyColor = isGreen ? '#10b981' : '#ef4444' // green-500 : red-500
  const wickColor = '#6b7280' // gray-500

  // Calculate positions
  const bodyHeight = Math.abs(close - open) * (height / (high - low))
  const bodyY = y + (high - Math.max(close, open)) * (height / (high - low))

  // Wick positions
  const wickX = x + width / 2
  const highY = y
  const lowY = y + height
  const bodyTopY = y + (high - Math.max(close, open)) * (height / (high - low))
  const bodyBottomY = y + (high - Math.min(close, open)) * (height / (high - low))

  return (
    <g>
      {/* High-Low wick */}
      <line x1={wickX} y1={highY} x2={wickX} y2={bodyTopY} stroke={wickColor} strokeWidth={1} />
      <line x1={wickX} y1={bodyBottomY} x2={wickX} y2={lowY} stroke={wickColor} strokeWidth={1} />

      {/* Body */}
      <rect
        x={x + width * 0.2}
        y={bodyY}
        width={width * 0.6}
        height={Math.max(bodyHeight, 1)}
        fill={bodyColor}
        stroke={bodyColor}
        strokeWidth={1}
      />
    </g>
  )
}

// Custom tooltip for better formatting
const CustomTooltip = ({ active, payload }: any) => {
  if (active && payload && payload.length) {
    const data = payload[0].payload
    const date = new Date(data.timestamp * 1000)

    return (
      <div className='bg-white dark:bg-gray-800 p-3 border border-gray-200 dark:border-gray-600 rounded shadow-lg'>
        <p className='text-sm font-medium text-gray-900 dark:text-white mb-2'>
          {date.toLocaleDateString()} {date.toLocaleTimeString()}
        </p>
        <div className='space-y-1 text-xs'>
          <div className='flex justify-between gap-4'>
            <span className='text-gray-600 dark:text-gray-400'>Open:</span>
            <span className='font-medium text-gray-900 dark:text-white'>
              ${data.open?.toFixed(2)}
            </span>
          </div>
          <div className='flex justify-between gap-4'>
            <span className='text-gray-600 dark:text-gray-400'>High:</span>
            <span className='font-medium text-green-600 dark:text-green-400'>
              ${data.high?.toFixed(2)}
            </span>
          </div>
          <div className='flex justify-between gap-4'>
            <span className='text-gray-600 dark:text-gray-400'>Low:</span>
            <span className='font-medium text-red-600 dark:text-red-400'>
              ${data.low?.toFixed(2)}
            </span>
          </div>
          <div className='flex justify-between gap-4'>
            <span className='text-gray-600 dark:text-gray-400'>Close:</span>
            <span
              className={`font-medium ${
                data.close >= data.open
                  ? 'text-green-600 dark:text-green-400'
                  : 'text-red-600 dark:text-red-400'
              }`}
            >
              ${data.close?.toFixed(2)}
            </span>
          </div>
          {data.volume && (
            <div className='flex justify-between gap-4 pt-1 border-t border-gray-200 dark:border-gray-600'>
              <span className='text-gray-600 dark:text-gray-400'>Volume:</span>
              <span className='font-medium text-gray-900 dark:text-white'>
                {data.volume.toLocaleString()}
              </span>
            </div>
          )}
        </div>
      </div>
    )
  }
  return null
}

/**
 * 高機能なローソク足チャートコンポーネントです。
 *
 * OHLC価格データの可視化、出来高表示、現在価格ライン、タイムフレーム選択、
 * カスタムツールチップなど、トレーディングに必要な機能を提供します。
 *
 * @param {TradingChartProps} props - コンポーネントのプロパティ
 * @returns {JSX.Element} レンダリングされたチャートコンポーネント
 *
 * @generated by Claude 🤖
 */
export const TradingChart: React.FC<TradingChartProps> = ({
  data,
  height = 400,
  showVolume = true,
  currentPrice,
  className = '',
}) => {
  const [timeframe, setTimeframe] = useState('1D')

  // Process data for chart
  const chartData = useMemo(() => {
    return data.map(item => ({
      timestamp: item.timestamp,
      open: item.open,
      high: item.high,
      low: item.low,
      close: item.close,
      volume: item.volume || 0,
      // Calculate price range for Y-axis scaling
      range: item.high - item.low,
    }))
  }, [data])

  // Calculate price bounds with padding
  const priceBounds = useMemo(() => {
    if (!chartData.length) return { min: 0, max: 100 }

    const prices = chartData.flatMap(d => [d.high, d.low])
    const min = Math.min(...prices)
    const max = Math.max(...prices)
    const padding = (max - min) * 0.05 // 5% padding

    return {
      min: Math.max(0, min - padding),
      max: max + padding,
    }
  }, [chartData])

  // Format timestamp for X-axis
  const formatXAxis = (timestamp: number) => {
    const date = new Date(timestamp * 1000)
    switch (timeframe) {
      case '1D':
      case '1W':
        return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })
      case '1M':
        return date.toLocaleDateString('en-US', { month: 'short', year: '2-digit' })
      default:
        return date.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })
    }
  }

  // Format price for Y-axis
  const formatYAxis = (value: number) => {
    if (value >= 1000) {
      return `$${(value / 1000).toFixed(1)}k`
    }
    return `$${value.toFixed(2)}`
  }

  if (!chartData.length) {
    return (
      <div
        className={`flex items-center justify-center h-96 bg-gray-50 dark:bg-gray-700 rounded ${className}`}
      >
        <p className='text-gray-500 dark:text-gray-400'>No chart data available</p>
      </div>
    )
  }

  const mainChartHeight = showVolume ? height * 0.7 : height
  const volumeChartHeight = showVolume ? height * 0.3 : 0

  return (
    <div className={`w-full ${className}`}>
      {/* Timeframe selector */}
      <div className='flex items-center justify-between mb-4'>
        <div className='flex space-x-2'>
          {['5M', '15M', '1H', '4H', '1D', '1W', '1M'].map(tf => (
            <button
              key={tf}
              onClick={() => setTimeframe(tf)}
              className={`px-3 py-1 text-sm rounded transition-colors ${
                timeframe === tf
                  ? 'bg-blue-500 text-white'
                  : 'bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-400 hover:bg-gray-200 dark:hover:bg-gray-600'
              }`}
            >
              {tf}
            </button>
          ))}
        </div>

        {currentPrice && (
          <div className='text-right'>
            <div className='text-lg font-semibold text-gray-900 dark:text-white'>
              ${currentPrice.toFixed(2)}
            </div>
            <div className='text-xs text-gray-500 dark:text-gray-400'>Current Price</div>
          </div>
        )}
      </div>

      {/* Main candlestick chart */}
      <div style={{ height: mainChartHeight }}>
        <ResponsiveContainer width='100%' height='100%'>
          <ComposedChart data={chartData} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>
            <CartesianGrid
              strokeDasharray='3 3'
              stroke='#e5e7eb'
              className='dark:stroke-gray-600'
            />
            <XAxis
              dataKey='timestamp'
              tickFormatter={formatXAxis}
              stroke='#6b7280'
              fontSize={12}
              interval='preserveStartEnd'
            />
            <YAxis
              domain={[priceBounds.min, priceBounds.max]}
              tickFormatter={formatYAxis}
              stroke='#6b7280'
              fontSize={12}
              width={60}
            />
            <Tooltip content={<CustomTooltip />} />

            {/* Current price line */}
            {currentPrice && (
              <ReferenceLine
                y={currentPrice}
                stroke='#3b82f6'
                strokeDasharray='5 5'
                strokeWidth={2}
              />
            )}

            {/* Render candlesticks using a custom component approach */}
            <Bar dataKey='high' fill='transparent' shape={<Candlestick />} />
          </ComposedChart>
        </ResponsiveContainer>
      </div>

      {/* Volume chart */}
      {showVolume && (
        <div style={{ height: volumeChartHeight }} className='mt-4'>
          <ResponsiveContainer width='100%' height='100%'>
            <ComposedChart data={chartData} margin={{ top: 10, right: 30, left: 20, bottom: 20 }}>
              <CartesianGrid
                strokeDasharray='3 3'
                stroke='#e5e7eb'
                className='dark:stroke-gray-600'
              />
              <XAxis
                dataKey='timestamp'
                tickFormatter={formatXAxis}
                stroke='#6b7280'
                fontSize={12}
                interval='preserveStartEnd'
              />
              <YAxis
                tickFormatter={value => {
                  if (value >= 1000000) return `${(value / 1000000).toFixed(1)}M`
                  if (value >= 1000) return `${(value / 1000).toFixed(1)}K`
                  return value.toString()
                }}
                stroke='#6b7280'
                fontSize={12}
                width={50}
              />
              <Tooltip
                formatter={(value: number) => [value.toLocaleString(), 'Volume']}
                labelFormatter={(timestamp: number) => new Date(timestamp * 1000).toLocaleString()}
                contentStyle={{
                  backgroundColor: 'var(--tooltip-bg)',
                  border: '1px solid var(--tooltip-border)',
                  borderRadius: '6px',
                  fontSize: '12px',
                }}
              />
              <Bar dataKey='volume' fill='#8b5cf6' opacity={0.7} radius={[2, 2, 0, 0]} />
            </ComposedChart>
          </ResponsiveContainer>
        </div>
      )}
    </div>
  )
}

export default TradingChart
