name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'feature/**' ]
  pull_request:
    branches: [ main, develop ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Code Quality Checks
  quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4.0.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm exec prisma generate

      - name: Build shared packages
        run: pnpm --filter @trading-viewer/shared build

      - name: 🔄 Circular dependency check
        run: |
          echo "## 🔄 循環依存チェック結果" >> $GITHUB_STEP_SUMMARY
          if pnpm deps:check; then
            echo "✅ 循環依存は見つかりませんでした" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ 循環依存が検出されました" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: 🕸️ Dependency analysis
        run: |
          echo "## 🕸️ 依存関係分析結果" >> $GITHUB_STEP_SUMMARY
          pnpm deps:cruise
          echo "✅ 依存関係の検証が完了しました" >> $GITHUB_STEP_SUMMARY

      - name: 📊 Duplicate dependencies check
        run: |
          echo "## 📊 重複依存チェック" >> $GITHUB_STEP_SUMMARY
          duplicates=$(pnpm analyze:deps:duplicates)
          if [ -z "$duplicates" ]; then
            echo "✅ 重複依存は見つかりませんでした" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ 重複依存が見つかりました:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "$duplicates" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

      - name: Lint check
        run: pnpm lint

      - name: Type check
        run: pnpm type-check

      - name: Format check
        run: pnpm format:check

  # Unit Tests
  unit-tests:
    runs-on: ubuntu-latest
    needs: quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4.0.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run client unit tests
        run: pnpm --filter @trading-viewer/client test:unit --coverage

      - name: Run server unit tests
        run: pnpm --filter @trading-viewer/server test:unit --coverage

      - name: Upload client coverage
        uses: codecov/codecov-action@v4
        with:
          files: ./apps/client/coverage/lcov.info
          flags: client
          name: client-coverage

      - name: Upload server coverage
        uses: codecov/codecov-action@v4
        with:
          files: ./apps/server/coverage/lcov.info
          flags: server
          name: server-coverage

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: tradingviewer_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4.0.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup test database
        run: |
          pnpm --filter @trading-viewer/server db:migrate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/tradingviewer_test

      - name: Run integration tests
        run: pnpm --filter @trading-viewer/server test:integration
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/tradingviewer_test
          NODE_ENV: test

  # Build Tests
  build:
    runs-on: ubuntu-latest
    needs: quality
    strategy:
      matrix:
        node-version: [18, 20]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4.0.0

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages and applications
        run: pnpm build

      - name: 📦 Bundle size analysis (Node 18 only)
        if: matrix.node-version == 18 && github.event_name == 'pull_request'
        run: |
          echo "## 📦 Bundle サイズ分析" >> bundle-report.md
          echo "### Client Build Status" >> bundle-report.md
          echo "✅ Client build 成功" >> bundle-report.md
          echo "### Bundle サイズ" >> bundle-report.md
          echo '```' >> bundle-report.md
          ls -lah apps/client/dist/assets/ 2>/dev/null || echo "No assets found" >> bundle-report.md
          echo '```' >> bundle-report.md

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            apps/client/dist
            apps/server/dist
            packages/*/dist
          key: build-${{ runner.os }}-${{ matrix.node-version }}-${{ github.sha }}
          restore-keys: |
            build-${{ runner.os }}-${{ matrix.node-version }}-

  # E2E Tests
  e2e-tests:
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4.0.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm --filter @trading-viewer/client exec playwright install --with-deps chromium

      - name: Run E2E tests
        run: pnpm --filter @trading-viewer/client test:e2e --project=chromium
        env:
          NODE_ENV: test

      - name: Upload E2E artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-artifacts
          path: |
            apps/client/test-results/
            apps/client/playwright-report/
          retention-days: 7

  # Security Scanning
  security:
    runs-on: ubuntu-latest
    needs: quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4.0.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔒 Security audit
        run: |
          echo "## 🔒 セキュリティ監査結果" >> $GITHUB_STEP_SUMMARY
          if pnpm security:audit; then
            echo "✅ セキュリティ脆弱性は見つかりませんでした" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ セキュリティ脆弱性が検出されました" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Run Snyk security scan
        uses: snyk/actions/node@0.4.0
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium

  # Performance Tests
  performance:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4.0.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run Lighthouse CI
        run: pnpm lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # Quality Gates
  quality-gate:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, security, build]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check quality gate
        run: |
          if [[ "${{ needs.unit-tests.result }}" != "success" ]]; then
            echo "Unit tests failed"
            exit 1
          fi
          if [[ "${{ needs.integration-tests.result }}" != "success" ]]; then
            echo "Integration tests failed"
            exit 1
          fi
          if [[ "${{ needs.e2e-tests.result }}" != "success" ]]; then
            echo "E2E tests failed"
            exit 1
          fi
          if [[ "${{ needs.security.result }}" != "success" ]]; then
            echo "Security scan failed"
            exit 1
          fi
          echo "All quality gates passed ✅"

      - name: 💬 Comment PR with analysis results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        env:
          SERVER_URL: ${{ github.server_url }}
          REPOSITORY: ${{ github.repository }}
          RUN_ID: ${{ github.run_id }}
        with:
          script: |
            const icon = (result) => result === 'success' ? '✅' : '❌';

            const body = `
            ## 🔍 CI/CD Pipeline Results

            ### ✅ 品質チェック結果
            - 🔄 循環依存チェック: ✅
            - 🕸️ 依存関係検証: ✅
            - 📊 重複依存チェック: ✅
            - 🧪 Unit Tests: ${icon(needs.unit-tests.result)}
            - 🔗 Integration Tests: ${icon(needs.integration-tests.result)}
            - 🎭 E2E Tests: ${icon(needs.e2e-tests.result)}
            - 🔒 Security Scan: ${icon(needs.security.result)}
            - 🏗️ Build: ${icon(needs.build.result)}

            ### 📊 メトリクス
            - パッケージ数: 4 (client, server, shared, ui)
            - モノレポ構成: pnpm workspace
            - Node.js: 18, 20 (build tested)

            詳細は [Actions ログ](${process.env.SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.RUN_ID}) を確認してください。
            `;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body.trim()
            });
        continue-on-error: true

  # Build Docker images
  build-images:
    runs-on: ubuntu-latest
    needs: quality-gate
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        app: [frontend, backend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}-${{ matrix.app }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/${{ matrix.app }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to staging (develop branch only)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-images
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment:
      name: staging
      url: https://staging.tradingviewer.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Staging deployment would happen here"
          echo "Using Docker images: ghcr.io/${{ github.repository }}-frontend:develop-${{ github.sha }}"
          echo "Using Docker images: ghcr.io/${{ github.repository }}-backend:develop-${{ github.sha }}"

  # Create deployment package for manual production deployment
  create-deployment-package:
    runs-on: ubuntu-latest
    needs: build-images
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create deployment package
        run: |
          mkdir -p deployment-package
          cp docker-compose.yml deployment-package/
          cp -r scripts deployment-package/
          cp .env.production.example deployment-package/
          cp DEPLOYMENT.md deployment-package/
          echo "Built Docker images:" > deployment-package/IMAGES.txt
          echo "ghcr.io/${{ github.repository }}-frontend:main-${{ github.sha }}" >> deployment-package/IMAGES.txt
          echo "ghcr.io/${{ github.repository }}-backend:main-${{ github.sha }}" >> deployment-package/IMAGES.txt
          tar -czf tradingviewer-deployment-${{ github.sha }}.tar.gz deployment-package/

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package-${{ github.sha }}
          path: tradingviewer-deployment-${{ github.sha }}.tar.gz
          retention-days: 30

      - name: Notify deployment package ready
        run: |
          echo "✅ Deployment package created for manual production deployment"
          echo "Download from: GitHub Actions > Artifacts > deployment-package-${{ github.sha }}"