name: Dependency Check

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run daily at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:

jobs:
  unused-dependencies:
    name: Check Unused Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check unused dependencies
        run: |
          echo "## 📦 Dependency Check Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Run depcheck
          npx depcheck --json > depcheck-results.json || true
          
          # Parse and display results
          node -e "
            const fs = require('fs');
            const results = JSON.parse(fs.readFileSync('depcheck-results.json', 'utf8'));
            
            const hasIssues = results.dependencies?.length > 0 || 
                            results.devDependencies?.length > 0 ||
                            results.missing && Object.keys(results.missing).length > 0;
            
            if (!hasIssues) {
              console.log('✅ No dependency issues found!');
              process.exit(0);
            }
            
            if (results.dependencies?.length > 0) {
              console.log('### ⚠️ Unused Dependencies');
              results.dependencies.forEach(dep => console.log('- ' + dep));
              console.log('');
            }
            
            if (results.devDependencies?.length > 0) {
              console.log('### ⚠️ Unused Dev Dependencies');
              results.devDependencies.forEach(dep => console.log('- ' + dep));
              console.log('');
            }
            
            if (results.missing && Object.keys(results.missing).length > 0) {
              console.log('### ❌ Missing Dependencies');
              Object.entries(results.missing).forEach(([dep, files]) => {
                console.log('- **' + dep + '** used in:');
                files.slice(0, 3).forEach(file => console.log('  - ' + file));
                if (files.length > 3) console.log('  - ... and ' + (files.length - 3) + ' more files');
              });
            }
          " >> $GITHUB_STEP_SUMMARY

      - name: Upload results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: depcheck-results
          path: depcheck-results.json
          retention-days: 7

  circular-dependencies:
    name: Check Circular Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check circular dependencies
        run: |
          echo "## 🔄 Circular Dependency Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check client
          echo "### Frontend (apps/client)" >> $GITHUB_STEP_SUMMARY
          npx madge apps/client/src --circular --ts-config apps/client/tsconfig.json --extensions ts,tsx > circular-client.txt 2>&1 || true
          
          if grep -q "No circular dependency found" circular-client.txt; then
            echo "✅ No circular dependencies found" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Circular dependencies detected:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            cat circular-client.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check server
          echo "### Backend (apps/server)" >> $GITHUB_STEP_SUMMARY
          npx madge apps/server/src --circular --ts-config apps/server/tsconfig.json --extensions ts > circular-server.txt 2>&1 || true
          
          if grep -q "No circular dependency found" circular-server.txt; then
            echo "✅ No circular dependencies found" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Circular dependencies detected:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            cat circular-server.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

      - name: Fail if circular dependencies found
        run: |
          if ! grep -q "No circular dependency found" circular-client.txt || ! grep -q "No circular dependency found" circular-server.txt; then
            echo "❌ Circular dependencies detected. Please fix them before merging."
            exit 1
          fi

  complexity-check:
    name: Check Code Complexity
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate complexity report
        run: |
          echo "## 📊 Complexity Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Count dependencies per file
          echo "### Files with Most Dependencies (Top 10)" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          npx madge apps/client/src --ts-config apps/client/tsconfig.json --extensions ts,tsx --summary 2>/dev/null | head -15 >> $GITHUB_STEP_SUMMARY || echo "Unable to generate summary" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check for orphaned files
          echo "### Orphaned Files Check" >> $GITHUB_STEP_SUMMARY
          npx madge apps/client/src --ts-config apps/client/tsconfig.json --extensions ts,tsx --orphans > orphans.txt 2>&1 || true
          
          if [ -s orphans.txt ]; then
            echo "⚠️ Found orphaned files (not imported anywhere):" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            cat orphans.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No orphaned files found" >> $GITHUB_STEP_SUMMARY
          fi

  dependency-summary:
    name: Summary
    runs-on: ubuntu-latest
    needs: [unused-dependencies, circular-dependencies, complexity-check]
    if: always()
    steps:
      - name: Create summary
        run: |
          echo "## 🎯 Dependency Check Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Unused Dependencies | ${{ needs.unused-dependencies.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Circular Dependencies | ${{ needs.circular-dependencies.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Complexity Check | ${{ needs.complexity-check.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.circular-dependencies.result }}" != "success" ]]; then
            echo "⚠️ **Action Required:** Circular dependencies detected. Please resolve before merging." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "💡 **Tips:**" >> $GITHUB_STEP_SUMMARY
          echo "- Run \`npx depcheck\` locally to find unused dependencies" >> $GITHUB_STEP_SUMMARY
          echo "- Run \`npx madge . --circular\` to detect circular dependencies" >> $GITHUB_STEP_SUMMARY
          echo "- Keep files under 300 lines for better maintainability" >> $GITHUB_STEP_SUMMARY